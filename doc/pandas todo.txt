OPEN TODO
	Play_by_Play.Py
		rename this file Game_Center.Py
		create new sql table to hold broadcast data
		create new sql table to hold game results summary
		capture tv broadcasts & game results summary info from play by play details
		add single gameId overrides (updateDB, queryDB, queryNHL)
		add logging
		this object should control (or replace?) code from Shifts.Py
		add code for GamesImportLog

	Shifts.Py
		add single gameId overrides (updateDB, queryDB, queryNHL)
		add logging

	Players.Py
		begin transition from function to object code

	add an UpdateImports object
		use this object to control all the other objects in order to poll the NHL for updates when appropriate
		scheduled updates for each database table

	re-poll everything from the NHL

	build normalized database schema from the imported data
		* assign import tables to an import database schema
		* build import schema agent, seperate from normalized schema agent and access
		reduce each import table to normalized components
			build tables to store these normalized components
			write objects to update and control these normalized components

	DRP - backup code & database plan

	build visualization interfaces
		Tableau - 5 example reports
		PowerBI - 5 example reports

	web blog

	implement SQL abstraction via SQLAlchemy ORM

********************************************************************************
2024-09-10
	Games.Py was Schedules.Py
		* add logging
		* rename this as the Games.Py file
		* remove stubbed logging columns and supporting code
		* add single season & single team overrides (updateDB, queryDB, query)
		* add code for GamesImportLog
		* queue up test db connections & test data
		* test new update function (including games_import_log functions)

2024-09-09
	PlayerImportLog.Py
		* rename existing update method to insert
		* add update method
		* test

	GamesImportLog.Py
		* rename existing update method to insert
		* add update method
		* test

2024-08-30
	Rosters.Py
		* add single triCode overrides (updateDB, queryDB, queryNHL)
		* add logging

	Seasons.Py
		* add single triCode overrides (updateDB, queryDB, queryNHL)
		* add logging

	add a ImportTableUpdateLog.py file
		* add ImportTableUpdateLog object to control table of same name
		* add table_update_log table to log when each import table is updated

	Teams.Py
		* add single triCode overrides (updateDB, queryDB, queryNHL)
		* add logging

	add a GamesImportLog.Py file
		* write a GamesImportLog object to control table of same name
		* add table to log when each gameId is checked for its play by play, results, shifts, and roster details

	add a PlayerImportLog.Py file
		* write a PlayerImportLog object to control table of same name
		* add table to log when each playerId is checked for their season, career, and award summaries

2024-08-21
	refactor existing collection & import processes
		break complex logic into more functions
		arrange broader metaphors (teams, games, players, etc) into objects
			assign existing functions to objects
			flesh out objects with missing or needed CRUD elements
			seperate "create new table" and "update existing table" processes
			start with games_import - updates for this one is probably most immediately useful
			focus on what happens when playoff schedules emerge & update as playoffs go along

2024-08-16
	refactor existing collection & import processes
		unify naming conventions
			remove all nhl_pandas_ and nhlpandas_ prefixes and import "as nhlpd."
			* rationalize '_import' table names
			push '_import' tables into their own schema
			name objects and functions accordingly
		make object files into a single (easily imported) library
			* build an lib folder for the collection object files
			* build an __init__.py
			* import object files to this __init__ file
			* move main.py and scrap.py out of this folder

2024-08-15
	shift charts
		https://api.nhle.com/stats/rest/en/shiftcharts?cayenneExp=gameId%3E=2023021082%20and%20gameId%3C=2023021094
	store to shifts_import table

2024-08-14 Pandas TODO
	find brody's missing goal

	improve usage of json_normalize across all pages
		* play_by_play.py
		* players.py
		* rosters.py
		* schedules.py
		* teams.py

2024-05-14 Pandas TODO
	Build delta process for games scheduled but not played
		identify tables that will need to be appended to
			game_play_by_play_import
			game_rosters_import
			games_import - update only
			shiftcharts_import
		check if polling columns are adequate, add tables or columns where appropriate


2024-05-06 Pandas TODO
	TOI data type conversion problem
		identify fields in existing _import tables that will need support
			goalie_career_totals_import
				regularSeason.timeOnIce
				playoffs.timeOnIce
			goalie_season_import
				timeOnIce
		google standard patterns to solve for this issue
			for MySQL table use DATETIME datatype where time starts at '1000-01-01 00:00:00'
			in Pandas, we'll want to add time values to this start date ('1000-01-01 00:00:00') and then record the date
		commit required table changes

	Repoll data

2024-03-25 Pandas TODO
	* get a scrap.py running for SQLAlchemy
		consider using their query framework? - big benefit is it allows others to adopt code without committing to mysql db
	* populate code for TOI data type conversion

2024-03-19 Pandas TODO
	* build player tables
		* bio/header
		* career
			* goalie
			* player
		* season
			* goalie
			* player
		* awards
		* check log
	* build import functions for each of these tables
	* wire import functions into the rest of players.py functions
	* test completed players.py


2024-03-20 Pandas TODO
	* clean up last night's python code, clear out test lines and notes cruft
	* clean up docs files
	* update table creation file
	* document python functions as written
	* refactor sql tables with '_import' suffix


2024-03-21 Pandas TODO
	* start git repo
		daily/hourly commit practice
		publish to public?

passed - already get this data in the players queryies - biggest advantage to bios is that you could poll many 100s
	of players at a time
	bios???
		https://api.nhle.com/stats/rest/en/skater/bios?start=000&limit=100&cayenneExp=gameTypeId=2
		&seasonId%3E=19171918&seasonId%3C=20232024
		https://api.nhle.com/stats/rest/en/goalie/bios?start=000&limit=100&cayenneExp=gameTypeId=2
		&seasonId%3E=19171918&seasonId%3C=20232024
